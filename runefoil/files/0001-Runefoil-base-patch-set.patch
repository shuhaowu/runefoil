From 2db723280983a2632316203c02507f318137e493 Mon Sep 17 00:00:00 2001
From: Shuhao Wu <shuhao@shuhaowu.com>
Date: Fri, 25 Jan 2019 09:17:44 -0500
Subject: [PATCH] Runefoil base patch set

Things done:

- Allow RuneliteAPI url be configurable via environmental variables
- Patched up Runelite HTTP Service to not crawl prices as the runefoil
  component will do it
---
 .../net/runelite/http/api/RuneLiteAPI.java    | 28 ++++++++--
 .../http/service/item/ItemService.java        | 51 +++++--------------
 2 files changed, 38 insertions(+), 41 deletions(-)

diff --git a/http-api/src/main/java/net/runelite/http/api/RuneLiteAPI.java b/http-api/src/main/java/net/runelite/http/api/RuneLiteAPI.java
index 49387a233..6c92767ce 100644
--- a/http-api/src/main/java/net/runelite/http/api/RuneLiteAPI.java
+++ b/http-api/src/main/java/net/runelite/http/api/RuneLiteAPI.java
@@ -91,22 +91,42 @@ public class RuneLiteAPI
 
 	public static HttpUrl getApiRoot()
 	{
-		return HttpUrl.parse(BASE);
+		String base = System.getenv("RUNELITE_API_BASE");
+		if (base == null)
+		{
+			base = BASE;
+		}
+		return HttpUrl.parse(base);
 	}
 
 	public static HttpUrl getApiBase()
 	{
-		return HttpUrl.parse(BASE + "/runelite-" + getVersion());
+		String base = System.getenv("RUNELITE_API_BASE");
+		if (base == null)
+		{
+			base = BASE;
+		}
+		return HttpUrl.parse(base + "/runelite-" + getVersion());
 	}
 
 	public static HttpUrl getStaticBase()
 	{
-		return HttpUrl.parse(STATICBASE);
+		String base = System.getenv("RUNELITE_STATIC_BASE");
+		if (base == null)
+		{
+			base = STATICBASE;
+		}
+		return HttpUrl.parse(base);
 	}
 
 	public static String getWsEndpoint()
 	{
-		return WSBASE + getVersion() + "/ws";
+		String wsbase = System.getenv("RUNELITE_WS_BASE");
+		if (wsbase == null)
+		{
+			wsbase = WSBASE;
+		}
+		return wsbase + getVersion() + "/ws";
 	}
 
 	public static String getVersion()
diff --git a/http-service/src/main/java/net/runelite/http/service/item/ItemService.java b/http-service/src/main/java/net/runelite/http/service/item/ItemService.java
index 2da7a5002..79ded56f6 100644
--- a/http-service/src/main/java/net/runelite/http/service/item/ItemService.java
+++ b/http-service/src/main/java/net/runelite/http/service/item/ItemService.java
@@ -88,7 +88,6 @@ public class ItemService
 	private final CacheService cacheService;
 
 	private final ConcurrentLinkedQueue<PendingLookup> pendingLookups = new ConcurrentLinkedQueue<PendingLookup>();
-	private int[] tradeableItems;
 	private final Random random = new Random();
 
 	@Autowired
@@ -457,43 +456,21 @@ public class ItemService
 				break;
 			case ITEM:
 				fetchItem(pendingLookup.getItemId());
+				// This is a runefoil patched behaviour because we don't run the minio
+				// cache service and thus the reloadItems function won't run (and is
+				// patched out).
+				//
+				// This means that prices will not updated after runelite starts
+				// (runefoil updates the price information before runelite boot, before
+				// the network is locked down, from runelite's API). Adding this line
+				// ensures that the prices might update (keeping in mind that there
+				// are a lot of levels of caches in Runelite that's not patched out,
+				// meaning that the caching mechanism will likely override any sort of
+				// price updates in the server).
+				//
+				// This is an acceptable tradeoff for the time being.
+				fetchPrice(pendingLookup.getItemId());
 				break;
 		}
 	}
-
-	@Scheduled(fixedDelay = 20_000)
-	public void crawlPrices()
-	{
-		if (tradeableItems == null || tradeableItems.length == 0)
-		{
-			return;
-		}
-
-		int idx = random.nextInt(tradeableItems.length);
-		int id = tradeableItems[idx];
-
-		if (getItem(id) == null)
-		{
-			// This is a new item..
-			log.debug("Fetching new item {}", id);
-			queueItem(id);
-			return;
-		}
-
-		log.debug("Fetching price for {}", id);
-
-		fetchPrice(id);
-	}
-
-	@Scheduled(fixedDelay = 1_8000_000) // 30 minutes
-	public void reloadItems() throws IOException
-	{
-		List<ItemDefinition> items = cacheService.getItems();
-		tradeableItems = items.stream()
-			.filter(item -> item.isTradeable)
-			.mapToInt(item -> item.id)
-			.toArray();
-		log.debug("Loaded {} tradeable items", tradeableItems.length);
-	}
-
 }
-- 
2.20.1


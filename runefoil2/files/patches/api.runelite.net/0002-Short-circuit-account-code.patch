From 4346c235de225ae638552fb71f9e07b1e0762066 Mon Sep 17 00:00:00 2001
From: Stephanie <eng.steph@gmail.com>
Date: Sun, 24 Jul 2022 00:26:31 -0400
Subject: [PATCH 2/4] Short circuit account code

Since we're running a single player instance of RuneLite API server
locally, the account feature should be usable without Google.

To do this, simply short circuited all the login code and automatically
login the player with a default account.
---
 .../http/service/account/AccountService.java  | 48 ++++++++++++++-----
 1 file changed, 35 insertions(+), 13 deletions(-)

diff --git a/http-service/src/main/java/net/runelite/http/service/account/AccountService.java b/http-service/src/main/java/net/runelite/http/service/account/AccountService.java
index 2f5afc8..3d257bf 100644
--- a/http-service/src/main/java/net/runelite/http/service/account/AccountService.java
+++ b/http-service/src/main/java/net/runelite/http/service/account/AccountService.java
@@ -139,22 +139,44 @@ public class AccountService
 	@GetMapping("/login")
 	public OAuthResponse login(@RequestParam(required = false) Integer port, @RequestParam(required = false) String redirectUrl)
 	{
-		State state = new State();
-		state.setPort(port);
-		state.setRedirectUrl(redirectUrl);
+		// State state = new State();
+		// state.setPort(port);
+		// state.setRedirectUrl(redirectUrl);
 
-		OAuth20Service service = new ServiceBuilder()
-			.apiKey(oauthClientId)
-			.apiSecret(oauthClientSecret)
-			.scope(SCOPE)
-			.callback(oauthCallback)
-			.state(gson.toJson(state))
-			.build(GoogleApi20.instance());
+		// OAuth20Service service = new ServiceBuilder()
+		// 	.apiKey(oauthClientId)
+		// 	.apiSecret(oauthClientSecret)
+		// 	.scope(SCOPE)
+		// 	.callback(oauthCallback)
+		// 	.state(gson.toJson(state))
+		// 	.build(GoogleApi20.instance());
+
+		// final Map<String, String> additionalParams = new HashMap<>();
+		// additionalParams.put("prompt", "select_account");
 
-		final Map<String, String> additionalParams = new HashMap<>();
-		additionalParams.put("prompt", "select_account");
+		try (Connection con = sql2o.open())
+		{
+			con.createQuery("insert ignore into users (username) values (:username)")
+					.addParameter("username", "fe@ironman.btw")
+					.executeUpdate();
+			UserEntry user = con.createQuery("select id from users where username = :username")
+					.addParameter("username", "fe@ironman.btw")
+					.executeAndFetchFirst(UserEntry.class);
+			if (user == null)
+			{
+				logger.warn("Unable to find newly created user session");
+				return null; // that's weird
+			}
 
-		String authorizationUrl = service.getAuthorizationUrl(additionalParams);
+			// insert session
+			con.createQuery("insert ignore into sessions (user, uuid) values (:user, :uuid)")
+					.addParameter("user", user.getId())
+					.addParameter("uuid", "17999f5c-3e5b-11ea-b77f-2e728ce88125")
+					.executeUpdate();
+		}
+		// PATCHED: We still need to return an OauthResponse to keep the patch size low.
+		//          The client needs to just assume they're logged in via fe@ironman.btw
+		String authorizationUrl = "http://fe.ironmeme.invalid";
 
 		OAuthResponse lr = new OAuthResponse();
 		lr.setOauthUrl(authorizationUrl);
-- 
2.25.1

